import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import io 
from datetime import datetime

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à
st.set_page_config(page_title="License Monitor", layout="wide")
st.title("‡∏£‡∏∞‡∏ö‡∏ö tracking ‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ SAFETY")

st.markdown("""
    <style>
    .stDownloadButton > button {
        background-color: #ff5c5c;  /* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏∏‡πà‡∏° */
        color: white;  /* ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ */
        border-radius: 8px;  /* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏• */
        border: none; /* ‡πÄ‡∏≠‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏≠‡∏≠‡∏Å */
    }
    .stDownloadButton > button:hover {
        background-color: #000000;  /* ‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÑ‡∏õ‡∏ß‡∏≤‡∏á */
        color: #ffffff;  /* ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÑ‡∏õ‡∏ß‡∏≤‡∏á */
    }
    </style>
""", unsafe_allow_html=True)

# ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
file = st.file_uploader("‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", type=['xlsx'])

if file:
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df = pd.read_excel(file)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö")
        st.dataframe(df)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        if 'license_expire_date' in df.columns:
            df['license_expire_date'] = pd.to_datetime(df['license_expire_date'], errors='coerce')
            df['days_until_expire'] = (df['license_expire_date'] - datetime.now()).dt.days
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            conditions = [
                (df['days_until_expire'] <= 0),
                (df['days_until_expire'] <= 30),
                (df['days_until_expire'] <= 90),
                (df['days_until_expire'] > 90)
            ]
            choices = ['‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏', '‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (30 ‡∏ß‡∏±‡∏ô)', '‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ', '‡∏õ‡∏Å‡∏ï‡∏¥']
            df['status'] = np.select(conditions, choices, default='‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(df))
            with col2:
                st.metric("‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏", len(df[df['status'] == '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏']))
            with col3:
                st.metric("‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏", len(df[df['status'] == '‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (30 ‡∏ß‡∏±‡∏ô)']))
            with col4:
                st.metric("‡∏õ‡∏Å‡∏ï‡∏¥", len(df[df['status'] == '‡∏õ‡∏Å‡∏ï‡∏¥']))
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°
            status_counts = df['status'].value_counts()
            fig = px.pie(values=status_counts.values, 
                        names=status_counts.index, 
                        title='‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û')
            st.plotly_chart(fig)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞, ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if 'faculty' in df.columns and 'program' in df.columns:
                col1, col2, col3 = st.columns(3)
                with col1:
                    selected_faculty = st.multiselect(
                        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞",
                        options=df['faculty'].unique(),
                        default=df['faculty'].unique()
                    )
                with col2:
                    selected_program = st.multiselect(
                        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°",
                        options=df['program'].unique(),
                        default=df['program'].unique()
                    )
                with col3:
                    selected_status = st.multiselect(
                        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                        options=['‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏', '‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (30 ‡∏ß‡∏±‡∏ô)', '‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ', '‡∏õ‡∏Å‡∏ï‡∏¥'],
                        default=['‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏', '‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (30 ‡∏ß‡∏±‡∏ô)']
                    )
                
                # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                filtered_df = df[
                    (df['faculty'].isin(selected_faculty)) &
                    (df['program'].isin(selected_program)) &
                    (df['status'].isin(selected_status))
                ]
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
                st.subheader("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
                if not filtered_df.empty:
                    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
                    filtered_df = filtered_df.sort_values('days_until_expire')
                    st.dataframe(filtered_df[[
                        'student_id', 'full_name', 'license_number',
                        'license_expire_date', 'phone', 'email',
                        'faculty', 'program', 'status'
                    ]])
                    
                    output = io.BytesIO()
                    filtered_df.to_excel(output, index=False, engine='openpyxl')
                    output.seek(0)  
                    st.download_button(
                        label=" üò≠ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
                        data=output,
                        file_name="follow_up_report.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )   
                else:
                    st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'faculty' ‡∏´‡∏£‡∏∑‡∏≠ 'program' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel")
        else:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'license_expire_date' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        st.write("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
